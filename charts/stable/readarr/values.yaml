image:
  repository: ghcr.io/elfhosted/readarr-develop
  pullPolicy: IfNotPresent
  tag: 0.4.13.2760@sha256:b01506982cb8886aab5e0e0f2a2781d8ab5157b36ffd5791175e4a6bfedfb0cd
exportarrImage:
  repository: ghcr.io/onedr0p/exportarr
  pullPolicy: IfNotPresent
  tag: v2.1.0@sha256:ffe2065573db0f9717443143316eac6b335c37e6f6fea2f6a238ef3f134ee50a
securityContext:
  container:
    readOnlyRootFilesystem: false
service:
  main:
    ports:
      main:
        port: 8787
  metrics:
    enabled: "{{ .Values.metrics.main.enabled }}"
    type: ClusterIP
    ports:
      metrics:
        enabled: true
        port: 8788
workload:
  main:
    podSpec:
      containers:
        main:
          probes:
            liveness:
              enabled: true
              type: http
              path: /ping
            readiness:
              enabled: true
              type: http
              path: /ping
            startup:
              enabled: true
              type: http
              path: /ping
          env:
            READARR__SERVER__PORT: "{{ .Values.service.main.ports.main.port }}"
             # External | Basic | Forms
            READARR__AUTH__METHOD: ""
            # DisabledForLocalAddresses | Enabled
            READARR__AUTH__REQUIRED: DisabledForLocalAddresses
            # READARR__APP__THEME: dark
            # READARR__APP__INSTANCENAME: Readarr
            # READARR__LOG__LEVEL: info
            # READARR__UPDATE__BRANCH: develop
        exportarr:
          enabled: "{{ .Values.metrics.main.enabled }}"
          imageSelector: exportarrImage
          args:
            - readarr
          probes:
            liveness:
              enabled: true
              type: http
              path: /healthz
              port: "{{ .Values.service.metrics.ports.metrics.port }}"
            readiness:
              enabled: true
              type: http
              path: /healthz
              port: "{{ .Values.service.metrics.ports.metrics.port }}"
            startup:
              enabled: true
              type: http
              path: /healthz
              port: "{{ .Values.service.metrics.ports.metrics.port }}"
          env:
            INTERFACE: 0.0.0.0
            PORT: "{{ .Values.service.metrics.ports.metrics.port }}"
            URL: '{{ printf "http://%v:%v" (include "tc.v1.common.lib.chart.names.fullname" $) .Values.service.main.ports.main.port }}'
            # additional metrics (slow)
            # ENABLE_ADDITIONAL_METRICS: false
            # enable gathering unknown queue items
            # ENABLE_UNKNOWN_QUEUE_ITEMS: false
            CONFIG: "/config/config.xml"
persistence:
  config:
    enabled: true
    targetSelector:
      main:
        main:
          mountPath: /config
        exportarr:
          mountPath: /config
          readOnly: true
metrics:
  main:
    enabled: true
    type: "servicemonitor"
    endpoints:
      - port: metrics
        path: /metrics
    targetSelector: metrics
    prometheusRule:
      enabled: false
portal:
  open:
    enabled: true
updated: true

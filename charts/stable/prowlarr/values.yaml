image:
  repository: ghcr.io/home-operations/prowlarr
  tag: 1.36.3.5071@sha256:fc2bf7caecc52e1dded4eee430c3fc77c08e4b812aa2b6b71b9083b673f96093
  pullPolicy: IfNotPresent
exportarrImage:
  repository: ghcr.io/onedr0p/exportarr
  pullPolicy: IfNotPresent
  tag: v2.2.0@sha256:320b0ea7399f4b9af4741dcdddd7d40c05c36b0359679305d8a54df4e97065df
securityContext:
  container:
    readOnlyRootFilesystem: false
service:
  main:
    ports:
      main:
        port: 9696
  metrics:
    enabled: "{{ .Values.metrics.main.enabled }}"
    type: ClusterIP
    ports:
      metrics:
        enabled: true
        port: 9697
workload:
  main:
    podSpec:
      containers:
        main:
          probes:
            liveness:
              path: /ping
            readiness:
              path: /ping
            startup:
              type: tcp
          env:
            PROWLARR__SERVER__PORT: "{{ .Values.service.main.ports.main.port }}"
             # External | Basic | Forms
            PROWLARR__AUTH__METHOD: ""
            # DisabledForLocalAddresses | Enabled
            PROWLARR__AUTH__REQUIRED: DisabledForLocalAddresses
            # PROWLARR__APP__THEME: dark
            # PROWLARR__APP__INSTANCENAME: Prowlarr
            # PROWLARR__LOG__LEVEL: info
            # PROWLARR__UPDATE__BRANCH: develop
        exportarr:
          enabled: "{{ .Values.metrics.main.enabled }}"
          imageSelector: exportarrImage
          args:
            - prowlarr
          probes:
            liveness:
              enabled: true
              type: http
              path: /healthz
              port: "{{ .Values.service.metrics.ports.metrics.port }}"
            readiness:
              enabled: true
              type: http
              path: /healthz
              port: "{{ .Values.service.metrics.ports.metrics.port }}"
            startup:
              enabled: true
              type: http
              path: /healthz
              port: "{{ .Values.service.metrics.ports.metrics.port }}"
          env:
            INTERFACE: 0.0.0.0
            PORT: "{{ .Values.service.metrics.ports.metrics.port }}"
            URL: '{{ printf "http://%v:%v" (include "tc.v1.common.lib.chart.names.fullname" $) .Values.service.main.ports.main.port }}'
            # additional metrics (slow)
            # ENABLE_ADDITIONAL_METRICS: false
            # enable gathering unknown queue items
            # ENABLE_UNKNOWN_QUEUE_ITEMS: false
            # enable backfill of historical metrics
            # PROWLARR__BACKFILL: false
            # Set a date from which to start the backfill
            # PROWLARR__BACKFILL_SINCE_DATE: 1970-01-01
            CONFIG: "/config/config.xml"
persistence:
  config:
    enabled: true
    targetSelector:
      main:
        main:
          mountPath: /config
        exportarr:
          mountPath: /config
          readOnly: true
configmap:
  dashboard:
    enabled: true
    labels:
      grafana_dashboard: "1"
    data:
      prowlarr.json: >-
        {{ .Files.Get "dashboard.json" | indent 8 }}
metrics:
  main:
    enabled: true
    type: "servicemonitor"
    endpoints:
      - port: metrics
        path: /metrics
    targetSelector: metrics
    prometheusRule:
      enabled: false

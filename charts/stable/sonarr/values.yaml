image:
  repository: ghcr.io/onedr0p/sonarr
  pullPolicy: IfNotPresent
  tag: 4.0.13.2932@sha256:004aa9dc8e670e28b3ee2dc65b3b850ea3bd5a45d3c5ce5068bc4d45583c1770
exportarrImage:
  repository: ghcr.io/onedr0p/exportarr
  pullPolicy: IfNotPresent
  tag: v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
service:
  main:
    ports:
      main:
        port: 8989
  metrics:
    enabled: "{{ .Values.metrics.main.enabled }}"
    type: ClusterIP
    ports:
      metrics:
        enabled: true
        port: 8990
workload:
  main:
    podSpec:
      containers:
        main:
          probes:
            liveness:
              enabled: true
              type: http
              path: /ping
            readiness:
              enabled: true
              type: http
              path: /ping
            startup:
              enabled: true
              type: http
              path: /ping
          env:
            SONARR__SERVER__PORT: "{{ .Values.service.main.ports.main.port }}"
             # External | Basic | Forms
            SONARR__AUTH__METHOD: ""
            # DisabledForLocalAddresses | Enabled
            SONARR__AUTH__REQUIRED: DisabledForLocalAddresses
            # SONARR__APP__THEME: dark
            # SONARR__APP__INSTANCENAME: Sonarr
            # SONARR__LOG__LEVEL: info
            # SONARR__UPDATE__BRANCH: develop
        exportarr:
          enabled: "{{ .Values.metrics.main.enabled }}"
          imageSelector: exportarrImage
          args:
            - sonarr
          probes:
            liveness:
              enabled: true
              type: http
              path: /healthz
              port: "{{ .Values.service.metrics.ports.metrics.port }}"
            readiness:
              enabled: true
              type: http
              path: /healthz
              port: "{{ .Values.service.metrics.ports.metrics.port }}"
            startup:
              enabled: true
              type: http
              path: /healthz
              port: "{{ .Values.service.metrics.ports.metrics.port }}"
          env:
            INTERFACE: 0.0.0.0
            PORT: "{{ .Values.service.metrics.ports.metrics.port }}"
            URL: '{{ printf "http://%v:%v" (include "tc.v1.common.lib.chart.names.fullname" $) .Values.service.main.ports.main.port }}'
            # additional metrics (slow)
            # ENABLE_ADDITIONAL_METRICS: false
            # enable gathering unknown queue items
            # ENABLE_UNKNOWN_QUEUE_ITEMS: false
            CONFIG: "/config/config.xml"
persistence:
  config:
    enabled: true
    targetSelector:
      main:
        main:
          mountPath: /config
        exportarr:
          mountPath: /config
          readOnly: true
metrics:
  main:
    enabled: true
    type: "servicemonitor"
    endpoints:
      - port: metrics
        path: /metrics
    targetSelector: metrics
    prometheusRule:
      enabled: false
portal:
  open:
    enabled: true
